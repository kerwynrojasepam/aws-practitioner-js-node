service: aws-practitioner-js-4-node
app: aws-practitioner-js-4-node
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-1
  stage: dev
  environment: ${file(.env.${opt:stage, self:provider.stage}.json)}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.STOCKS_TABLE}"
        - Effect: Allow
          Action: sns:*
          Resource:
            - Fn::GetAtt:
              - SQSQueue
              - Arn
        - Effect: Allow
          Action: sns:*
          Resource:
            Ref: SNSTopic

plugins:
  # - serverless-functions-base-path
  - serverless-auto-swagger
  - serverless-esbuild
  - serverless-offline
custom:
  # webpack:
  #   webpackConfig: webpack.config.js
  #   includeModules: true
  # functionsBasePath: src/functions
  autoswagger:
    apiType: "httpApi"
    generateSwaggerOnDeploy: true
    typefiles: ["./src/models/models.types.ts", "./src/typings/http.types.ts"]
    title: "aws-practitioner-js-4-node"
    useStage: true
    host: dbxxlpoykj.execute-api.us-west-1.amazonaws.com/${sls:stage}
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node14
    define:
      require.resolve: undefined
    platform: node
    concurrency: 10

functions:
  loadInitialData:
    handler: src/functions/scripts/handler.loadInitialData
    events:
      - http:
          path: scripts/loadInitialData
          method: get
          cors: true

  getProductsList:
    handler: src/functions/products/handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductsById:
    handler: src/functions/products/handler.getProductsById
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  createProduct:
    handler: src/functions/products/handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          bodyType: 'CreateProductPayload'

  catalogBatchProcess:
    handler: src/functions/products/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${self:provider.environment.SUB_EMAIL_1}
        TopicArn:
          Ref: SNSTopic
    SNSExpensiveProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${self:provider.environment.SUB_EMAIL_2}
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price: [ { "numeric": [ ">=", 250 ] } ]
  Outputs:
    SQSQueueOutput:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]
      Export:
        Name: SQSQueueOutput
    SQSQueueUrlOutput:
      Value:
        Fn::GetAtt: [ SQSQueue, QueueUrl ]
      Export:
        Name: SQSQueueUrlOutput
