service: aws-pract-js-4-import-service
app: aws-pract-js-4-import-service
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-1
  stage: dev
  environment: ${file(.env.${opt:stage, self:provider.stage}.json)}
  httpApi:
    cors: true
  iam:
    role:
      # name: "${self:provider.environment.BUCKET_NAME}_s3"
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}"
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::ImportValue: SQSQueueOutput

plugins:
  - serverless-esbuild
  - serverless-offline
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node14
    define:
      require.resolve: undefined
    platform: node
    concurrency: 1

functions:
  importProductsFile:
    handler: src/functions/products/handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            type: token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            arn: !ImportValue BasicAuthorizerLambdaArnId

  importFileParser:
    handler: src/functions/products/handler.importFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

resources:
  Resources:
    BucketPolicyPublicRead:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:provider.environment.BUCKET_NAME}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowPublicRead
              Effect: Allow
              Principal: {
                "AWS": "*"
              }
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"

    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: "ACCESS_DENIED"
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: "UNAUTHORIZED"
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    MissingAuthToken:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: "MISSING_AUTHENTICATION_TOKEN"
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
